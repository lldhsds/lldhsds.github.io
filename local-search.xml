<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Locust web性能测试实践</title>
    <link href="/2024/06/16/Locust-web%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/"/>
    <url>/2024/06/16/Locust-web%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Locust-web性能测试实践"><a href="#Locust-web性能测试实践" class="headerlink" title="Locust web性能测试实践"></a>Locust web性能测试实践</h1><p>Locust 是一个开源的负载测试工具，使用Python语言实现，其简洁、轻量、高效的并发机制基于<code>Gevent</code>协程，可以实现单机模拟生成较高的并发压力。具有分布式和可扩展的特点，能够帮助你评估系统的性能并找到潜在的瓶颈。</p><p><strong>Locust 的主要特点:</strong></p><ol><li><strong>使用 Python 编写测试脚本</strong>：你可以用 Python 编写用户行为脚本，定义各种用户操作和请求。</li><li><strong>分布式测试</strong>：支持分布式测试，允许在多台机器上同时运行，从而模拟大量的并发用户。</li><li><strong>实时 Web 界面</strong>：提供直观的 Web 界面，用于配置测试参数、启动和监控测试。</li><li><strong>可扩展性强</strong>：可以通过编写自定义代码来扩展 Locust 的功能，满足不同测试需求。</li></ol><h2 id="1-安装Locust"><a href="#1-安装Locust" class="headerlink" title="1. 安装Locust"></a>1. 安装Locust</h2><p>使用 pip 进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip3 install locust -i https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure><p>查看安装版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">locust -V<br></code></pre></td></tr></table></figure><h2 id="2-web-demo应用"><a href="#2-web-demo应用" class="headerlink" title="2. web demo应用"></a>2. web demo应用</h2><p>使用 Python 的 Flask 框架实现一个简单的web服务器，包含主页 (<code>/</code>) 和关于页 (<code>/about</code>)，用于Locust执行测试。</p><h3 id="2-1-安装Flask"><a href="#2-1-安装Flask" class="headerlink" title="2.1 安装Flask"></a>2.1 安装Flask</h3><p>使用pip安装：</p><p><code>pip3 install flask -i https://mirrors.aliyun.com/pypi/simple/</code></p><h3 id="2-2-创建Flask应用"><a href="#2-2-创建Flask应用" class="headerlink" title="2.2 创建Flask应用"></a>2.2 创建Flask应用</h3><p>新建一个名为 <code>app.py</code> 的文件，编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> jsonify(message=<span class="hljs-string">&quot;Welcome to the homepage!&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/about&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">about</span>():<br>    <span class="hljs-keyword">return</span> jsonify(message=<span class="hljs-string">&quot;This is the about page.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br><br></code></pre></td></tr></table></figure><h3 id="2-3-运行-Flask-应用"><a href="#2-3-运行-Flask-应用" class="headerlink" title="2.3 运行 Flask 应用"></a>2.3 运行 Flask 应用</h3><p>在终端中运行以下命令启动 Flask 服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python app.py<br></code></pre></td></tr></table></figure><p>默认情况下，Flask 服务器会在 <code>http://localhost:5000</code> 运行。你可以通过浏览器访问这个地址，查看主页和关于页是否正常显示。</p><h2 id="3-运行模式"><a href="#3-运行模式" class="headerlink" title="3. 运行模式"></a>3. 运行模式</h2><p>Locust支持单机模式、分布式模式和无头模式。每种模式适用于不同的测试场景。</p><h3 id="3-1-单机模式"><a href="#3-1-单机模式" class="headerlink" title="3.1 单机模式"></a>3.1 单机模式</h3><p>适用于小规模测试。简单直接，只需在一台机器上运行 Locust。</p><p>一个简单的 Locust 测试脚本如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># locust-test1.py</span><br><span class="hljs-keyword">from</span> locust <span class="hljs-keyword">import</span> HttpUser, TaskSet, task, between<br><br><span class="hljs-comment"># 定义一个任务类继承TaskSet类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBehavior</span>(<span class="hljs-title class_ inherited__">TaskSet</span>):<br>    <span class="hljs-comment"># @task(1) 是装饰器，声明此方法是一个任务，权重为1。权重不写的话默认为1</span><br><span class="hljs-meta">    @task(<span class="hljs-params"><span class="hljs-number">1</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">self</span>):<br>        self.client.get(<span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-comment"># @task(2) 是装饰器，声明此方法是一个任务，权重为2</span><br><span class="hljs-meta">    @task(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">about</span>(<span class="hljs-params">self</span>):<br>        self.client.get(<span class="hljs-string">&quot;/about&quot;</span>)<br><br><span class="hljs-comment"># 定义一个运行类继承HttpUser类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebsiteUser</span>(<span class="hljs-title class_ inherited__">HttpUser</span>):<br>    tasks = [UserBehavior]<br>    wait_time = between(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br>    host = <span class="hljs-string">&quot;http://localhost:5000&quot;</span><br></code></pre></td></tr></table></figure><p>在这个脚本中，我们定义了一个 <code>UserBehavior</code> 类，其中包含两个任务：访问主页（<code>index</code>）和访问关于页（<code>about</code>）。然后我们定义了一个 <code>WebsiteUser</code> 类，指定用户行为、请求之间的等待时间以及测试的web服务器。</p><p><strong>运行 Locust</strong>：</p><p>在终端中运行以下命令启动 Locust：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">locust -f locust-test1.py<br></code></pre></td></tr></table></figure><p><strong>配置和启动测试</strong>：</p><p>打开浏览器访问 <code>http://localhost:8089</code>，在 Locust 的 Web 界面中设置测试参数，设置并发用户数为50，设置每秒增加的用户数为10，即以多快的速度增加用户。测试host为本机运行的flask服务器，运行时间为60秒。然后启动测试。</p><p>结果结果统计：</p><p>图标性能曲线：</p><p>测试报告下载：</p><h3 id="3-2-分布式模式"><a href="#3-2-分布式模式" class="headerlink" title="3.2 分布式模式"></a>3.2 分布式模式</h3><p>适用于大规模测试。支持多台机器协同工作，能够模拟大量并发用户，包括 master 和 worker 节点，worker节点产生负载， master 节点主要负责协调和收集来自多个 worker 节点的数据。</p><p><strong>运行方法</strong>：</p><ul><li><p>启动 master：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">locust -f locust-test1.py --master<br></code></pre></td></tr></table></figure></li><li><p>启动 worker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">worker机器同样需要安装locust</span><br>locust -f locust-test1.py --worker --master-host=&lt;master_ip&gt;<br></code></pre></td></tr></table></figure></li></ul><p>worker运行后，master侧命令行会有worker已连接的打印，可以看到当前master下面连接的worker数量。</p><p>在浏览器中打开 <code>http://&lt;master_ip&gt;:8089</code>，配置测试参数并启动测试：</p><h3 id="3-3-无头模式（Headless-Mode）"><a href="#3-3-无头模式（Headless-Mode）" class="headerlink" title="3.3 无头模式（Headless Mode）"></a>3.3 无头模式（Headless Mode）</h3><p>适用于持续集成（CI）环境或不需要图形界面的场景。可以自动执行测试，并将结果输出到控制台或文件中。</p><p><strong>运行方法</strong>：</p><p>使用命令行参数配置和启动测试：</p><p><code>locust -f locust-test1.py --headless -u 100 -r 10 -H http://192.168.0.210:5000 --run-time 1m  --csv=results</code></p><p><strong>参数说明</strong>：</p><ul><li><code>--headless</code>：无头模式运行。</li><li><code>-u</code> 或 <code>--users</code>：模拟的用户数。</li><li><code>-r</code> 或 <code>--spawn-rate</code>：每秒启动的用户数。</li><li><code>--run-time</code>：测试运行时间，例如 <code>1m</code> 表示 1 分钟。</li><li><code>--csv</code>：将测试结果输出到 CSV 文件。</li></ul><h3 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h3><ul><li><strong>单机模式</strong> 适用于简单的小规模测试。</li><li><strong>分布式模式</strong> 适用于大规模测试，通过多个 worker 节点协同工作来模拟大量并发用户。</li><li><strong>无头模式</strong> 适用于自动化测试和持续集成环境，可以在没有图形界面的情况下运行测试并输出结果。</li></ul><h2 id="4-locust运行参数说明"><a href="#4-locust运行参数说明" class="headerlink" title="4. locust运行参数说明"></a>4. locust运行参数说明</h2><table><thead><tr><th>命令行选项</th><th>环境变量</th><th>配置文件字段</th><th>描述说明</th></tr></thead><tbody><tr><td><code>-f, --locustfile</code></td><td><code>LOCUST_LOCUSTFILE</code></td><td><code>locustfile</code></td><td>要导入的Python模块文件，例如’..&#x2F;other.py’。默认为locustfile。</td></tr><tr><td><code>-H, --host</code></td><td><code>LOCUST_HOST</code></td><td><code>host</code></td><td>负载测试主机地址，例如’<a href="https://www.baidu.com'./">https://www.baidu.com&#39;。</a></td></tr><tr><td><code>-u, --users</code></td><td><code>LOCUST_USERS</code></td><td><code>users</code></td><td>并发用户数。主要与<code>--headless</code>一起使用。您可以在测试期间使用”w”和”W”（增加1或10个用户）以及”s”和”S”（停止1或10个用户）来更改。</td></tr><tr><td><code>-r, --spawn-rate</code></td><td><code>LOCUST_SPAWN_RATE</code></td><td><code>spawn-rate</code></td><td>每秒产生用户的速率。主要与<code>--headless</code>一起使用。</td></tr><tr><td><code>--hatch-rate</code></td><td><code>LOCUST_HATCH_RATE</code></td><td><code>hatch-rate</code></td><td>启动虚拟用户的速率。</td></tr><tr><td><code>-t, --run-time</code></td><td><code>LOCUST_RUN_TIME</code></td><td><code>run-time</code></td><td>在指定的时间段后停止测试，例如（300s、20m、3h、1h30m等）。仅与<code>--headless</code>一起使用。默认为永久运行。</td></tr><tr><td><code>--web-host</code></td><td><code>LOCUST_WEB_HOST</code></td><td><code>web-host</code></td><td>绑定Web界面的主机。默认为’*’（所有接口）。</td></tr><tr><td><code>--web-port, -P</code></td><td><code>LOCUST_WEB_PORT</code></td><td><code>web-port</code></td><td>运行Web主机的端口地址。默认为8089。</td></tr><tr><td><code>--headless</code></td><td><code>LOCUST_HEADLESS</code></td><td><code>headless</code></td><td>禁用Web界面，立即开始负载测试。需要指定<code>-u</code>和<code>-t</code>。</td></tr><tr><td><code>--autostart</code></td><td><code>LOCUST_AUTOSTART</code></td><td><code>autostart</code></td><td>立即开始测试（不禁用Web UI）。使用<code>-u</code>和<code>-t</code>控制用户数和运行时间。</td></tr><tr><td><code>--autoquit</code></td><td><code>LOCUST_AUTOQUIT</code></td><td><code>autoquit</code></td><td>在测试运行完成后 X 秒后完全退出 Locust。仅与<code>--autostart</code>一起使用。默认为保持Locust运行，直到使用 CTRL+C 关闭。</td></tr><tr><td><code>--headful</code></td><td><code>LOCUST_HEADFUL</code></td><td><code>headful</code></td><td>启用Headful模式。</td></tr><tr><td><code>--web-auth</code></td><td><code>LOCUST_WEB_AUTH</code></td><td><code>web-auth</code></td><td>使用基本身份验证打开Web界面。格式为username:password。</td></tr><tr><td><code>--tls-cert</code></td><td><code>LOCUST_TLS_CERT</code></td><td><code>tls-cert</code></td><td>用于HTTPS服务的TLS证书的路径。</td></tr><tr><td><code>--tls-key</code></td><td><code>LOCUST_TLS_KEY</code></td><td><code>tls-key</code></td><td>用于HTTPS服务的TLS私钥的路径。</td></tr><tr><td><code>--master</code></td><td><code>LOCUST_MODE_MASTER</code></td><td><code>master</code></td><td>以Master模式运行，用于分布式负载测试。</td></tr><tr><td><code>--master-bind-host</code></td><td><code>LOCUST_MASTER_BIND_HOST</code></td><td><code>master-bind-host</code></td><td>Master节点绑定的主机名或IP地址。仅在与<code>--master</code>一起使用。默认为’*’（所有可用接口）。</td></tr><tr><td><code>--master-bind-port</code></td><td><code>LOCUST_MASTER_BIND_PORT</code></td><td><code>master-bind-port</code></td><td>Master节点绑定的端口。仅在与<code>--master</code>一起使用。默认为5557。</td></tr><tr><td><code>--expect-workers</code></td><td><code>LOCUST_EXPECT_WORKERS</code></td><td><code>expect-workers</code></td><td>预期的分布式客户端数量。仅在与<code>--headless</code>一起使用时生效。</td></tr><tr><td><code>--expect-workers-max-wait</code></td><td><code>LOCUST_EXPECT_WORKERS_MAX_WAIT</code></td><td><code>expect-workers-max-wait</code></td><td>等待Worker连接的最长时间。默认为永远等待。</td></tr><tr><td><code>--worker</code></td><td><code>LOCUST_MODE_WORKER</code></td><td><code>worker</code></td><td>以Worker模式运行，用于分布式负载测试。</td></tr><tr><td><code>--master-host</code></td><td><code>LOCUST_MASTER_NODE_HOST</code></td><td><code>master-host</code></td><td>Master节点的主机名或IP地址。仅在与<code>--worker</code>一起使用。默认为127.0.0.1。</td></tr><tr><td><code>--master-port</code></td><td><code>LOCUST_MASTER_NODE_PORT</code></td><td><code>master-port</code></td><td>Master节点使用的端口。仅在与<code>--worker</code>一起使用。默认为5557。</td></tr><tr><td><code>-T, --tags</code></td><td><code>LOCUST_TAGS</code></td><td><code>tags</code></td><td>测试中要包含的标签列表，仅执行具有任何匹配标签的任务。</td></tr><tr><td><code>-E, --exclude-tags</code></td><td><code>LOCUST_EXCLUDE_TAGS</code></td><td><code>exclude-tags</code></td><td>要从测试中排除的标签列表，仅执行没有匹配标签的任务。</td></tr><tr><td><code>--csv</code></td><td><code>LOCUST_CSV</code></td><td><code>csv</code></td><td>将请求统计信息以CSV格式存储到文件中。</td></tr><tr><td><code>--csv-full-history</code></td><td><code>LOCUST_CSV_FULL_HISTORY</code></td><td><code>csv-full-history</code></td><td>将每个统计信息条目以CSV格式存储到_stats_history.csv文件中。</td></tr><tr><td><code>--print-stats</code></td><td><code>LOCUST_PRINT_STATS</code></td><td><code>print-stats</code></td><td>在控制台中周期性打印统计信息。</td></tr><tr><td><code>--only-summary</code></td><td><code>LOCUST_ONLY_SUMMARY</code></td><td><code>only-summary</code></td><td>仅打印摘要统计信息。</td></tr><tr><td><code>--reset-stats</code></td><td><code>LOCUST_RESET_STATS</code></td><td><code>reset-stats</code></td><td>完成后重置统计信息。在分布式模式下，应在Master和Worker上设置。</td></tr><tr><td><code>--html</code></td><td><code>LOCUST_HTML</code></td><td><code>html</code></td><td>将HTML报告存储到指定的文件路径。</td></tr><tr><td><code>--skip-log-setup</code></td><td><code>LOCUST_SKIP_LOG_SETUP</code></td><td><code>skip-log-setup</code></td><td>禁用Locust的日志记录设置。</td></tr><tr><td><code>--loglevel, -L</code></td><td><code>LOCUST_LOGLEVEL</code></td><td><code>loglevel</code></td><td>日志级别，选择DEBUG&#x2F;INFO&#x2F;WARNING&#x2F;ERROR&#x2F;CRITICAL。默认为INFO。</td></tr><tr><td><code>--logfile</code></td><td><code>LOCUST_LOGFILE</code></td><td><code>logfile</code></td><td>日志文件的路径。如果未设置，日志将输出到stderr。</td></tr><tr><td><code>--exit-code-on-error</code></td><td><code>LOCUST_EXIT_CODE_ON_ERROR</code></td><td><code>exit-code-on-error</code></td><td>在测试结果包含任何失败或错误时设置退出代码。默认为1。</td></tr><tr><td><code>-s, --stop-timeout</code></td><td><code>LOCUST_STOP_TIMEOUT</code></td><td><code>stop-timeout</code></td><td>退出之前等待模拟用户完成的任务的秒数。仅在运行Locust分布式时设置在主进程上。</td></tr></tbody></table><p>有关更多详细信息，包括如何使用文件或环境变量设置选项，请参阅文档：<a href="https://docs.locust.io/en/stable/configuration.html">https://docs.locust.io/en/stable/configuration.html</a></p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ol><li><p>官方文档：<a href="http://docs.locust.io/en/stable/installation.html">http://docs.locust.io/en/stable/installation.html</a></p></li><li><p>Locust性能测试之快速入门: <a href="https://www.cnblogs.com/xyztank/articles/16932194.html">https://www.cnblogs.com/xyztank/articles/16932194.html</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>测试架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>locust</tag>
      
      <tag>web性能测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/06/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/06/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2024/06/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/stoneman.jpeg" class="" title="图片引用">]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/16/hello-world/"/>
    <url>/2024/06/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
